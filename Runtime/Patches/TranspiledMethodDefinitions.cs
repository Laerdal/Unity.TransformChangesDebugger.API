using System.Collections.Generic;
using System.Linq;
using System.Reflection;
using System.Reflection.Emit;
using HarmonyLib;
using Mono.Cecil;
using Mono.Cecil.Rocks;
using MonoMod.Utils;
using TransformChangesDebugger.API.Extensions;
using UnityEngine;

namespace TransformChangesDebugger.API.Patches
{
    internal static class TranspiledMethodDefinitions
    {
                
        //following code is generated using Linqpad script (TransformChangesDebuggerDefault) for entries in class TranspiledMethodNames, do not add manually
#region TranspileAutoGeneratedSetupCode
        
        public static readonly string set_position__Vector3 = "UnityEngine.Transform.set_position(UnityEngine.Vector3)";
        public static readonly string set_localPosition__Vector3 = "UnityEngine.Transform.set_localPosition(UnityEngine.Vector3)";
        public static readonly string set_eulerAngles__Vector3 = "UnityEngine.Transform.set_eulerAngles(UnityEngine.Vector3)";
        public static readonly string set_localEulerAngles__Vector3 = "UnityEngine.Transform.set_localEulerAngles(UnityEngine.Vector3)";
        public static readonly string set_right__Vector3 = "UnityEngine.Transform.set_right(UnityEngine.Vector3)";
        public static readonly string set_up__Vector3 = "UnityEngine.Transform.set_up(UnityEngine.Vector3)";
        public static readonly string set_forward__Vector3 = "UnityEngine.Transform.set_forward(UnityEngine.Vector3)";
        public static readonly string set_rotation__Quaternion = "UnityEngine.Transform.set_rotation(UnityEngine.Quaternion)";
        public static readonly string set_localRotation__Quaternion = "UnityEngine.Transform.set_localRotation(UnityEngine.Quaternion)";
        public static readonly string set_localScale__Vector3 = "UnityEngine.Transform.set_localScale(UnityEngine.Vector3)";
        public static readonly string SetPositionAndRotation__Vector3_Quaternion = "UnityEngine.Transform.SetPositionAndRotation(UnityEngine.Vector3,UnityEngine.Quaternion)";
        public static readonly string Translate__Vector3_Space = "UnityEngine.Transform.Translate(UnityEngine.Vector3,UnityEngine.Space)";
        public static readonly string Translate__Vector3 = "UnityEngine.Transform.Translate(UnityEngine.Vector3)";
        public static readonly string Translate__Single_Single_Single_Space = "UnityEngine.Transform.Translate(System.Single,System.Single,System.Single,UnityEngine.Space)";
        public static readonly string Translate__Single_Single_Single = "UnityEngine.Transform.Translate(System.Single,System.Single,System.Single)";
        public static readonly string Translate__Vector3_Transform = "UnityEngine.Transform.Translate(UnityEngine.Vector3,UnityEngine.Transform)";
        public static readonly string Translate__Single_Single_Single_Transform = "UnityEngine.Transform.Translate(System.Single,System.Single,System.Single,UnityEngine.Transform)";
        public static readonly string Rotate__Vector3_Space = "UnityEngine.Transform.Rotate(UnityEngine.Vector3,UnityEngine.Space)";
        public static readonly string Rotate__Vector3 = "UnityEngine.Transform.Rotate(UnityEngine.Vector3)";
        public static readonly string Rotate__Single_Single_Single_Space = "UnityEngine.Transform.Rotate(System.Single,System.Single,System.Single,UnityEngine.Space)";
        public static readonly string Rotate__Single_Single_Single = "UnityEngine.Transform.Rotate(System.Single,System.Single,System.Single)";
        public static readonly string Rotate__Vector3_Single_Space = "UnityEngine.Transform.Rotate(UnityEngine.Vector3,System.Single,UnityEngine.Space)";
        public static readonly string Rotate__Vector3_Single = "UnityEngine.Transform.Rotate(UnityEngine.Vector3,System.Single)";
        public static readonly string RotateAround__Vector3_Vector3_Single = "UnityEngine.Transform.RotateAround(UnityEngine.Vector3,UnityEngine.Vector3,System.Single)";
        public static readonly string LookAt__Transform_Vector3 = "UnityEngine.Transform.LookAt(UnityEngine.Transform,UnityEngine.Vector3)";
        public static readonly string LookAt__Transform = "UnityEngine.Transform.LookAt(UnityEngine.Transform)";
        public static readonly string LookAt__Vector3_Vector3 = "UnityEngine.Transform.LookAt(UnityEngine.Vector3,UnityEngine.Vector3)";
        public static readonly string LookAt__Vector3 = "UnityEngine.Transform.LookAt(UnityEngine.Vector3)";
        public static readonly string RotateAround__Vector3_Single = "UnityEngine.Transform.RotateAround(UnityEngine.Vector3,System.Single)";
        public static readonly string RotateAroundLocal__Vector3_Single = "UnityEngine.Transform.RotateAroundLocal(UnityEngine.Vector3,System.Single)";
        
        internal static readonly Dictionary<string, ChangeType> FullTrackedMethodNameToChangeTypeMap = new Dictionary<string, ChangeType>()
        {
            [set_position__Vector3] = ChangeType.Position,
            [set_localPosition__Vector3] = ChangeType.Position,
            [set_eulerAngles__Vector3] = ChangeType.Rotation,
            [set_localEulerAngles__Vector3] = ChangeType.Rotation,
            [set_right__Vector3] = ChangeType.Rotation,
            [set_up__Vector3] = ChangeType.Rotation,
            [set_forward__Vector3] = ChangeType.Rotation,
            [set_rotation__Quaternion] = ChangeType.Rotation,
            [set_localRotation__Quaternion] = ChangeType.Rotation,
            [set_localScale__Vector3] = ChangeType.Scale,
            [SetPositionAndRotation__Vector3_Quaternion] = ChangeType.Position, //TODO: how to handle rotation and position in single go? also check other props
            [Translate__Vector3_Space] = ChangeType.Position,
            [Translate__Vector3] = ChangeType.Position,
            [Translate__Single_Single_Single_Space] = ChangeType.Position,
            [Translate__Single_Single_Single] = ChangeType.Position,
            [Translate__Vector3_Transform] = ChangeType.Position,
            [Translate__Single_Single_Single_Transform] = ChangeType.Position,
            [Rotate__Vector3_Space] = ChangeType.Rotation,
            [Rotate__Vector3] = ChangeType.Rotation,
            [Rotate__Single_Single_Single_Space] = ChangeType.Rotation,
            [Rotate__Single_Single_Single] = ChangeType.Rotation,
            [Rotate__Vector3_Single_Space] = ChangeType.Rotation,
            [Rotate__Vector3_Single] = ChangeType.Rotation,
            [RotateAround__Vector3_Vector3_Single] = ChangeType.Rotation, 
            [LookAt__Transform_Vector3] = ChangeType.Rotation,
            [LookAt__Transform] = ChangeType.Rotation,
            [LookAt__Vector3_Vector3] = ChangeType.Rotation,
            [LookAt__Vector3] = ChangeType.Rotation,
            [RotateAround__Vector3_Single] = ChangeType.Rotation,
            [RotateAroundLocal__Vector3_Single] = ChangeType.Rotation,
        };
        
        internal static readonly Dictionary<string, InterceptCallSetupParam> InterceptionTypeToInterceptCallParameters = new Dictionary<string, InterceptCallSetupParam>
        {
#if NET_4_6
            [set_position__Vector3] = CreateInterceptCallSetupParam(set_position__Vector3, nameof(Transpile_set_position__Vector3)),
            [set_localPosition__Vector3] = CreateInterceptCallSetupParam(set_localPosition__Vector3, nameof(Transpile_set_localPosition__Vector3)),
            [set_eulerAngles__Vector3] = CreateInterceptCallSetupParam(set_eulerAngles__Vector3, nameof(Transpile_set_eulerAngles__Vector3)),
            [set_localEulerAngles__Vector3] = CreateInterceptCallSetupParam(set_localEulerAngles__Vector3, nameof(Transpile_set_localEulerAngles__Vector3)),
            [set_right__Vector3] = CreateInterceptCallSetupParam(set_right__Vector3, nameof(Transpile_set_right__Vector3)),
            [set_up__Vector3] = CreateInterceptCallSetupParam(set_up__Vector3, nameof(Transpile_set_up__Vector3)),
            [set_forward__Vector3] = CreateInterceptCallSetupParam(set_forward__Vector3, nameof(Transpile_set_forward__Vector3)),
            [set_rotation__Quaternion] = CreateInterceptCallSetupParam(set_rotation__Quaternion, nameof(Transpile_set_rotation__Quaternion)),
            [set_localRotation__Quaternion] = CreateInterceptCallSetupParam(set_localRotation__Quaternion, nameof(Transpile_set_localRotation__Quaternion)),
            [set_localScale__Vector3] = CreateInterceptCallSetupParam(set_localScale__Vector3, nameof(Transpile_set_localScale__Vector3)),
            [SetPositionAndRotation__Vector3_Quaternion] = CreateInterceptCallSetupParam(SetPositionAndRotation__Vector3_Quaternion, nameof(Transpile_SetPositionAndRotation__Vector3_Quaternion)),
            [Translate__Vector3_Space] = CreateInterceptCallSetupParam(Translate__Vector3_Space, nameof(Transpile_Translate__Vector3_Space)),
            [Translate__Vector3] = CreateInterceptCallSetupParam(Translate__Vector3, nameof(Transpile_Translate__Vector3)),
            [Translate__Single_Single_Single_Space] = CreateInterceptCallSetupParam(Translate__Single_Single_Single_Space, nameof(Transpile_Translate__Single_Single_Single_Space)),
            [Translate__Single_Single_Single] = CreateInterceptCallSetupParam(Translate__Single_Single_Single, nameof(Transpile_Translate__Single_Single_Single)),
            [Translate__Vector3_Transform] = CreateInterceptCallSetupParam(Translate__Vector3_Transform, nameof(Transpile_Translate__Vector3_Transform)),
            [Translate__Single_Single_Single_Transform] = CreateInterceptCallSetupParam(Translate__Single_Single_Single_Transform, nameof(Transpile_Translate__Single_Single_Single_Transform)),
            [Rotate__Vector3_Space] = CreateInterceptCallSetupParam(Rotate__Vector3_Space, nameof(Transpile_Rotate__Vector3_Space)),
            [Rotate__Vector3] = CreateInterceptCallSetupParam(Rotate__Vector3, nameof(Transpile_Rotate__Vector3)),
            [Rotate__Single_Single_Single_Space] = CreateInterceptCallSetupParam(Rotate__Single_Single_Single_Space, nameof(Transpile_Rotate__Single_Single_Single_Space)),
            [Rotate__Single_Single_Single] = CreateInterceptCallSetupParam(Rotate__Single_Single_Single, nameof(Transpile_Rotate__Single_Single_Single)),
            [Rotate__Vector3_Single_Space] = CreateInterceptCallSetupParam(Rotate__Vector3_Single_Space, nameof(Transpile_Rotate__Vector3_Single_Space)),
            [Rotate__Vector3_Single] = CreateInterceptCallSetupParam(Rotate__Vector3_Single, nameof(Transpile_Rotate__Vector3_Single)),
            [RotateAround__Vector3_Vector3_Single] = CreateInterceptCallSetupParam(RotateAround__Vector3_Vector3_Single, nameof(Transpile_RotateAround__Vector3_Vector3_Single)),
            [LookAt__Transform_Vector3] = CreateInterceptCallSetupParam(LookAt__Transform_Vector3, nameof(Transpile_LookAt__Transform_Vector3)),
            [LookAt__Transform] = CreateInterceptCallSetupParam(LookAt__Transform, nameof(Transpile_LookAt__Transform)),
            [LookAt__Vector3_Vector3] = CreateInterceptCallSetupParam(LookAt__Vector3_Vector3, nameof(Transpile_LookAt__Vector3_Vector3)),
            [LookAt__Vector3] = CreateInterceptCallSetupParam(LookAt__Vector3, nameof(Transpile_LookAt__Vector3)),
            [RotateAround__Vector3_Single] = CreateInterceptCallSetupParam(RotateAround__Vector3_Single, nameof(Transpile_RotateAround__Vector3_Single)),
            [RotateAroundLocal__Vector3_Single] = CreateInterceptCallSetupParam(RotateAroundLocal__Vector3_Single, nameof(Transpile_RotateAroundLocal__Vector3_Single)),
#else         
            //Tool only supports API Compatibility level 4.x
#endif
        };
        
#if NET_4_6
        private static IEnumerable<CodeInstruction> Transpile_set_position__Vector3(MethodBase methodBase, ILGenerator il, IEnumerable<CodeInstruction> instructions) => TransformPatches.TranspileGenericSet(methodBase, il, instructions, "UnityEngine.Transform.set_position(UnityEngine.Vector3)");
        private static IEnumerable<CodeInstruction> Transpile_set_localPosition__Vector3(MethodBase methodBase, ILGenerator il, IEnumerable<CodeInstruction> instructions) => TransformPatches.TranspileGenericSet(methodBase, il, instructions, "UnityEngine.Transform.set_localPosition(UnityEngine.Vector3)");
        private static IEnumerable<CodeInstruction> Transpile_set_eulerAngles__Vector3(MethodBase methodBase, ILGenerator il, IEnumerable<CodeInstruction> instructions) => TransformPatches.TranspileGenericSet(methodBase, il, instructions, "UnityEngine.Transform.set_eulerAngles(UnityEngine.Vector3)");
        private static IEnumerable<CodeInstruction> Transpile_set_localEulerAngles__Vector3(MethodBase methodBase, ILGenerator il, IEnumerable<CodeInstruction> instructions) => TransformPatches.TranspileGenericSet(methodBase, il, instructions, "UnityEngine.Transform.set_localEulerAngles(UnityEngine.Vector3)");
        private static IEnumerable<CodeInstruction> Transpile_set_right__Vector3(MethodBase methodBase, ILGenerator il, IEnumerable<CodeInstruction> instructions) => TransformPatches.TranspileGenericSet(methodBase, il, instructions, "UnityEngine.Transform.set_right(UnityEngine.Vector3)");
        private static IEnumerable<CodeInstruction> Transpile_set_up__Vector3(MethodBase methodBase, ILGenerator il, IEnumerable<CodeInstruction> instructions) => TransformPatches.TranspileGenericSet(methodBase, il, instructions, "UnityEngine.Transform.set_up(UnityEngine.Vector3)");
        private static IEnumerable<CodeInstruction> Transpile_set_forward__Vector3(MethodBase methodBase, ILGenerator il, IEnumerable<CodeInstruction> instructions) => TransformPatches.TranspileGenericSet(methodBase, il, instructions, "UnityEngine.Transform.set_forward(UnityEngine.Vector3)");
        private static IEnumerable<CodeInstruction> Transpile_set_rotation__Quaternion(MethodBase methodBase, ILGenerator il, IEnumerable<CodeInstruction> instructions) => TransformPatches.TranspileGenericSet(methodBase, il, instructions, "UnityEngine.Transform.set_rotation(UnityEngine.Quaternion)");
        private static IEnumerable<CodeInstruction> Transpile_set_localRotation__Quaternion(MethodBase methodBase, ILGenerator il, IEnumerable<CodeInstruction> instructions) => TransformPatches.TranspileGenericSet(methodBase, il, instructions, "UnityEngine.Transform.set_localRotation(UnityEngine.Quaternion)");
        private static IEnumerable<CodeInstruction> Transpile_set_localScale__Vector3(MethodBase methodBase, ILGenerator il, IEnumerable<CodeInstruction> instructions) => TransformPatches.TranspileGenericSet(methodBase, il, instructions, "UnityEngine.Transform.set_localScale(UnityEngine.Vector3)");
        private static IEnumerable<CodeInstruction> Transpile_SetPositionAndRotation__Vector3_Quaternion(MethodBase methodBase, ILGenerator il, IEnumerable<CodeInstruction> instructions) => TransformPatches.TranspileGenericSet(methodBase, il, instructions, "UnityEngine.Transform.SetPositionAndRotation(UnityEngine.Vector3,UnityEngine.Quaternion)");
        private static IEnumerable<CodeInstruction> Transpile_Translate__Vector3_Space(MethodBase methodBase, ILGenerator il, IEnumerable<CodeInstruction> instructions) => TransformPatches.TranspileGenericSet(methodBase, il, instructions, "UnityEngine.Transform.Translate(UnityEngine.Vector3,UnityEngine.Space)");
        private static IEnumerable<CodeInstruction> Transpile_Translate__Vector3(MethodBase methodBase, ILGenerator il, IEnumerable<CodeInstruction> instructions) => TransformPatches.TranspileGenericSet(methodBase, il, instructions, "UnityEngine.Transform.Translate(UnityEngine.Vector3)");
        private static IEnumerable<CodeInstruction> Transpile_Translate__Single_Single_Single_Space(MethodBase methodBase, ILGenerator il, IEnumerable<CodeInstruction> instructions) => TransformPatches.TranspileGenericSet(methodBase, il, instructions, "UnityEngine.Transform.Translate(System.Single,System.Single,System.Single,UnityEngine.Space)");
        private static IEnumerable<CodeInstruction> Transpile_Translate__Single_Single_Single(MethodBase methodBase, ILGenerator il, IEnumerable<CodeInstruction> instructions) => TransformPatches.TranspileGenericSet(methodBase, il, instructions, "UnityEngine.Transform.Translate(System.Single,System.Single,System.Single)");
        private static IEnumerable<CodeInstruction> Transpile_Translate__Vector3_Transform(MethodBase methodBase, ILGenerator il, IEnumerable<CodeInstruction> instructions) => TransformPatches.TranspileGenericSet(methodBase, il, instructions, "UnityEngine.Transform.Translate(UnityEngine.Vector3,UnityEngine.Transform)");
        private static IEnumerable<CodeInstruction> Transpile_Translate__Single_Single_Single_Transform(MethodBase methodBase, ILGenerator il, IEnumerable<CodeInstruction> instructions) => TransformPatches.TranspileGenericSet(methodBase, il, instructions, "UnityEngine.Transform.Translate(System.Single,System.Single,System.Single,UnityEngine.Transform)");
        private static IEnumerable<CodeInstruction> Transpile_Rotate__Vector3_Space(MethodBase methodBase, ILGenerator il, IEnumerable<CodeInstruction> instructions) => TransformPatches.TranspileGenericSet(methodBase, il, instructions, "UnityEngine.Transform.Rotate(UnityEngine.Vector3,UnityEngine.Space)");
        private static IEnumerable<CodeInstruction> Transpile_Rotate__Vector3(MethodBase methodBase, ILGenerator il, IEnumerable<CodeInstruction> instructions) => TransformPatches.TranspileGenericSet(methodBase, il, instructions, "UnityEngine.Transform.Rotate(UnityEngine.Vector3)");
        private static IEnumerable<CodeInstruction> Transpile_Rotate__Single_Single_Single_Space(MethodBase methodBase, ILGenerator il, IEnumerable<CodeInstruction> instructions) => TransformPatches.TranspileGenericSet(methodBase, il, instructions, "UnityEngine.Transform.Rotate(System.Single,System.Single,System.Single,UnityEngine.Space)");
        private static IEnumerable<CodeInstruction> Transpile_Rotate__Single_Single_Single(MethodBase methodBase, ILGenerator il, IEnumerable<CodeInstruction> instructions) => TransformPatches.TranspileGenericSet(methodBase, il, instructions, "UnityEngine.Transform.Rotate(System.Single,System.Single,System.Single)");
        private static IEnumerable<CodeInstruction> Transpile_Rotate__Vector3_Single_Space(MethodBase methodBase, ILGenerator il, IEnumerable<CodeInstruction> instructions) => TransformPatches.TranspileGenericSet(methodBase, il, instructions, "UnityEngine.Transform.Rotate(UnityEngine.Vector3,System.Single,UnityEngine.Space)");
        private static IEnumerable<CodeInstruction> Transpile_Rotate__Vector3_Single(MethodBase methodBase, ILGenerator il, IEnumerable<CodeInstruction> instructions) => TransformPatches.TranspileGenericSet(methodBase, il, instructions, "UnityEngine.Transform.Rotate(UnityEngine.Vector3,System.Single)");
        private static IEnumerable<CodeInstruction> Transpile_RotateAround__Vector3_Vector3_Single(MethodBase methodBase, ILGenerator il, IEnumerable<CodeInstruction> instructions) => TransformPatches.TranspileGenericSet(methodBase, il, instructions, "UnityEngine.Transform.RotateAround(UnityEngine.Vector3,UnityEngine.Vector3,System.Single)");
        private static IEnumerable<CodeInstruction> Transpile_LookAt__Transform_Vector3(MethodBase methodBase, ILGenerator il, IEnumerable<CodeInstruction> instructions) => TransformPatches.TranspileGenericSet(methodBase, il, instructions, "UnityEngine.Transform.LookAt(UnityEngine.Transform,UnityEngine.Vector3)");
        private static IEnumerable<CodeInstruction> Transpile_LookAt__Transform(MethodBase methodBase, ILGenerator il, IEnumerable<CodeInstruction> instructions) => TransformPatches.TranspileGenericSet(methodBase, il, instructions, "UnityEngine.Transform.LookAt(UnityEngine.Transform)");
        private static IEnumerable<CodeInstruction> Transpile_LookAt__Vector3_Vector3(MethodBase methodBase, ILGenerator il, IEnumerable<CodeInstruction> instructions) => TransformPatches.TranspileGenericSet(methodBase, il, instructions, "UnityEngine.Transform.LookAt(UnityEngine.Vector3,UnityEngine.Vector3)");
        private static IEnumerable<CodeInstruction> Transpile_LookAt__Vector3(MethodBase methodBase, ILGenerator il, IEnumerable<CodeInstruction> instructions) => TransformPatches.TranspileGenericSet(methodBase, il, instructions, "UnityEngine.Transform.LookAt(UnityEngine.Vector3)");
        private static IEnumerable<CodeInstruction> Transpile_RotateAround__Vector3_Single(MethodBase methodBase, ILGenerator il, IEnumerable<CodeInstruction> instructions) => TransformPatches.TranspileGenericSet(methodBase, il, instructions, "UnityEngine.Transform.RotateAround(UnityEngine.Vector3,System.Single)");
        private static IEnumerable<CodeInstruction> Transpile_RotateAroundLocal__Vector3_Single(MethodBase methodBase, ILGenerator il, IEnumerable<CodeInstruction> instructions) => TransformPatches.TranspileGenericSet(methodBase, il, instructions, "UnityEngine.Transform.RotateAroundLocal(UnityEngine.Vector3,System.Single)");
        
#else
        //Tool only supports API Compatibility level 4.x
#endif
        
#endregion TranspileAutoGeneratedSetupCode

        //methods that calls are redirected can not be re-patched as that'd cause issues, excluding whole types as this will be quicker than checking method names, reconsider if not good enough
        internal static HashSet<string> FullTypesNamesExcludedFromPatching = new HashSet<string>()
        {
            typeof(Transform).FullName
        };

        private static InterceptCallSetupParam CreateInterceptCallSetupParam(string fullMethodName, string transpileMethodName)
        {
            return new InterceptCallSetupParam(
                unityModule => GetMethod(unityModule, fullMethodName), 
                CreateDefaultTranspiler(transpileMethodName)
            );
        }
        
        private static HarmonyMethod CreateDefaultTranspiler(string transpiledMethodName)
        {
            return new HarmonyMethod(typeof(TranspiledMethodDefinitions).GetMethod(transpiledMethodName, BindingFlags.Static | BindingFlags.NonPublic));
        }
        
        public static readonly Dictionary<string, MethodDefinition> FullUnityTypeNamesToMethodDefinitionMap = new Dictionary<string, MethodDefinition>(); 
        
        private static MethodDefinition GetMethod(ModuleDefinition unityModule, string fullName)
        {
            //if not created, rebuild whole in one go, no need to do 1 by 1, we'll iterate over all anyway
            if (!FullUnityTypeNamesToMethodDefinitionMap.Any())
            {
                foreach (var methodDefinitionToFullNameKv in unityModule.Types
                    .First(t => t.Name == nameof(Transform)).GetMethods()
                    .Select(m => new { MethodDefinition = m, FullName = m.ResolveReflection().ResolveFullName() }))
                {
                    FullUnityTypeNamesToMethodDefinitionMap[methodDefinitionToFullNameKv.FullName] = methodDefinitionToFullNameKv.MethodDefinition;
                }
            }
            
            return FullUnityTypeNamesToMethodDefinitionMap.TryGetValue(fullName, out var found) ? found : null;
        }
    }
}